// UsersPage.tsx
import {useEffect, useState} from 'react';
import {UsersService} from '../client/services/UsersService';
import {UserCreate, UserOut, UserUpdate} from '../client';
import {UserFormModal} from './UserFormModal';
import {useSelector} from 'react-redux';
import {useNavigate} from 'react-router-dom';
import React from 'react';

export const UsersPage = () => {
    const currentUser = useSelector((state: any) => state.auth.user);
    console.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d', currentUser.id);
    const [users, setUsers] = useState<UserOut[]>([]);
    const [loading, setLoading] = useState(false);
    const [editingUser, setEditingUser] = useState<UserOut | null>(null);
    const [modalOpen, setModalOpen] = useState(false);
    const navigate = useNavigate();

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
    const fetchUsers = async () => {
        if (currentUser.role != 'admin') {
            navigate('/tasks');
        }
        setLoading(true);
        try {
            const res = await UsersService.listUsersUsersGet();
            setUsers(res);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        } finally {
            setLoading(false);
        }
    };

    // –û–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    useEffect(() => {
        fetchUsers();
    }, []);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleCreate = async (data: UserCreate) => {
        try {
            await UsersService.createUserUsersPost(data);
            await fetchUsers();
            setModalOpen(false)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleUpdate = async (data: UserUpdate) => {
        if (!editingUser) return;
        try {
            await UsersService.updateUserUsersPut(data);
            setEditingUser(null);
            await fetchUsers();
            setModalOpen(false)
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const handleDelete = async (id: number) => {
        try {
            await UsersService.deleteUserUsersUserIdDelete(id);
            await fetchUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    };

    return (
        <div className="p-4">
            <h1 className="text-xl font-bold mb-4">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>

            <button className="btn btn-primary mb-2" onClick={() => {
                setEditingUser(null);
                setModalOpen(true);
            }}>
                + –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            </button>

            {loading ? (
                <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            ) : (
                <table className="table-auto w-full border">
                    <thead>
                    <tr>
                        <th>–ò–º—è</th>
                        <th>Email</th>
                        <th>–†–æ–ª—å</th>
                        <th>–ê–∫—Ç–∏–≤–µ–Ω</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                    </thead>
                    <tbody>
                    {users.map(user => (
                        <tr key={user.id} className="border-t">
                            <td>{user.name}</td>
                            <td>{user.email}</td>
                            <td>{user.role}</td>
                            <td>{user.is_active ? '‚úÖ' : '‚ùå'}</td>
                            <td>
                                <button onClick={() => {
                                    setEditingUser(user);
                                    setModalOpen(true);
                                }}>‚úèÔ∏è
                                </button>
                                <button onClick={() => handleDelete(user.id)}>üóëÔ∏è</button>
                            </td>
                        </tr>
                    ))}
                    </tbody>
                </table>
            )}

            {modalOpen && (
                <UserFormModal
                    initial={editingUser}
                    onSubmit={(values) => {
                        editingUser
                            ? handleUpdate(values as UserUpdate)
                            : handleCreate(values as UserCreate)
                    }
                    }
                    onClose={() => setModalOpen(false)}
                />
            )}
        </div>
    );
};
